#!/bin/bash
#
# Copyright Â© 2023
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -e

# ====== amdcuda script configurations ======

# Set custom llvm prefix here
# LLVM_PREFIX=""
# CUDA_PATH="/nethome/jchen706/cuda-11.5"
# DEVICE_LIB_PATH=""

if [[ -z "$CUDA_PATH" ]]; then
    if [[ -d "$HOME/cuda-11.5" ]]; then
        CUDA_PATH="$HOME/cuda-11.5"
    fi
fi

# ===========================================

# ====== defs ======

AMDCUDA_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )
AMDCUDA_RT_DIR="$AMDCUDA_DIR/build/runtime"
AMDCUDA_DEVICE_BITCODE_DIR="$AMDCUDA_DIR/build"
AMDCUDA_HOST_TTOR="$AMDCUDA_DIR/build/compilation/hostTranslator"
AMDCUDA_KERN_TTOR="$AMDCUDA_DIR/build/compilation/kernelTranslator"
AMDCUDA_SCRIPT_LOGFILE="$(pwd)/amdcuda.log"
AMDCUDA_CWD="$(pwd)"

if [[ -z "$LLVM_PREFIX" ]]; then
    LLVM_PREFIX="$(dirname "$(dirname "$(which clang)")")"
fi

AMDCUDA_CLANG="$LLVM_PREFIX/bin/clang"
AMDCUDA_CLANGXX="$LLVM_PREFIX/bin/clang++"
AMDCUDA_LLVM_DIS="$LLVM_PREFIX/bin/llvm-dis"
AMDCUDA_LLVM_AS="$LLVM_PREFIX/bin/llvm-as"
AMDCUDA_LLVM_LINK="$LLVM_PREFIX/bin/llvm-link"
AMDCUDA_LLC="$LLVM_PREFIX/bin/llc"
AMDCUDA_LLD="$LLVM_PREFIX/bin/lld"
AMDCUDA_LD="$LLVM_PREFIX/bin/ld.lld"
AMDCUDA_CLANG_OFFLOAD_BUNDLER="$LLVM_PREFIX/bin/clang-offload-bundler"
AMDCUDA_CLANG_RES_DIR="$(realpath "$LLVM_PREFIX/lib/clang/"*)"
AMDCUDA_CLANGRT_DIR="$(realpath "$AMDCUDA_CLANG_RES_DIR/lib/"*)"

# Paths to search for bitcode libraries, and will be modified later to include DEVICE_LIB_PATH
AMDCUDA_BITCODE_SEARCH_PATHS=(
    "$AMDCUDA_DIR/bitcode"
    "$AMDCUDA_DEVICE_BITCODE_DIR"
)

# TODO: dynamically generate this list
AMDCUDA_BUILTIN_HIP_DEVICE_BITCODE=(
    hip.bc ocml.bc ockl.bc oclc_daz_opt_off.bc oclc_unsafe_math_off.bc
    oclc_finite_only_off.bc oclc_correctly_rounded_sqrt_on.bc oclc_wavefrontsize64_on.bc
    oclc_isa_version_90a.bc oclc_abi_version_400.bc
)

# Additional bitcode libraries from CuPBoP-AMD that will be linked with the translatetd IR.
AMDCUDA_LINKED_ADDITIONAL_BITCODE=(
    # Linked CuPBoP-AMD bitcode
    "cudaamd-gridblock-size.ll" "cudaamd-math.ll" "cuda2gcn.ll"
    "atomic.ll" "textureInt2DReadMode.ll" "textureFloat1DReadMode.ll"
    "textureFloat4_1DReadMode.ll" "cupbop-amd-bitcode.bc"
    
    # Re-link against ROCm-Device-Libs
    opencl.bc ockl.bc ocml.bc oclc_abi_version_400.bc oclc_finite_only_off.bc
    oclc_unsafe_math_on.bc oclc_daz_opt_on.bc oclc_correctly_rounded_sqrt_on.bc
    oclc_isa_version_90a.bc oclc_wavefrontsize64_on.bc
)

AMDCUDA_KERN_ASSEMBLER_FLAGS=(
    -save-temps=cwd -disable-free
    -clear-ast-before-backend -disable-llvm-verifier
    -discard-value-names -mrelocation-model pic -pic-level 1
    -fhalf-no-semantic-interposition
    -mframe-pointer=none
    -fno-rounding-math
    -mconstructor-aliases
    -aux-target-cpu x86-64
    -fcuda-is-device -mllvm
    -amdgpu-internalize-symbols
    -fcuda-allow-variadic-functions
    -fvisibility=hidden
    -fapply-global-visibility-to-externs
)

# Compiler flags
AMDCUDA_CFLAGS=()
AMDCUDA_LDFLAGS=()

# Compiled objects to be linked together
AMDCUDA_COMPILED_OBJECTS=()
AMDCUDA_ADDITIONAL_OBJECTS=()

# Link compiled objects
AMDCUDA_OPT_LINK=1

# Output filename
AMDCUDA_OPT_OUTPUT=

# Save intermediate files
AMDCUDA_OPT_SAVE_TEMPS=0

# Disassemble intermediate and translated IRs
AMDCUDA_OPT_INSPECT_IR=0

# Verbose outputs
AMDCUDA_OPT_VERBOSE=0

# Optimization level passed to the compiler
AMDCUDA_OPT_OPTIMIZATION_LEVEL=0

print_usage() {
    cat <<EOF
Usage: $0 [OPTIONS] inputs...

    -c          Only run preprocess, compile, and assemble steps (do not link).
    -g          Generate source-level debug information
    -h          Print this help message.
    -i          Inspect intermediate and translated IRs.
    -I <path>   Add <path> to the header search path.
    -l <lib>    Link against <lib> at link time.
    -L <path>   Add <path> to the linker search path.
    -o <file>   Write output to <file>. The default is the input program name with the ".translated" suffix.
    -O <level>  Optimization level. The default is -O0.
    -t          Do not cleanup temporary files produced by the compilers and translators after completion.
    -v          Print compiler and translator outputs to stdout/stderr (instead of just stderrs and a temporary log file that gets removed).
EOF
}

# ====== helper fns ======

on_nonzero() {
    local exit_code=$?
    cat >>"$AMDCUDA_SCRIPT_LOGFILE" <<EOF

Program exited with code: $exit_code
===================================================

EOF
    echo "[!] An error occurred during the previous step. Below are the most recent lines in the logs:"
    tail -n 50 "$AMDCUDA_SCRIPT_LOGFILE"
    echo "[!] The complete outputs can be found in $AMDCUDA_SCRIPT_LOGFILE. All temporary files related to the errored program are also preserved."
    exit 1
}

set -o errtrace
trap "on_nonzero" ERR

log_section_start() {
    cat >>"$AMDCUDA_SCRIPT_LOGFILE" <<EOF
===================================================
$@
EOF
    if [[ "$AMDCUDA_OPT_VERBOSE" = "1" ]]; then
        echo "[*] $@"
    fi
}

log_section_output() {
    echo "$@" >>"$AMDCUDA_SCRIPT_LOGFILE"
}

log_section_end() {
    cat >>"$AMDCUDA_SCRIPT_LOGFILE" <<EOF
===================================================

EOF
}

log_fatal() {
    echo "[!] $@"
    cat >>"$AMDCUDA_SCRIPT_LOGFILE" <<EOF
===================================================
Fatal error: $@
Exiting...
===================================================
EOF
    exit 1
}

log_info() {
    if [[ "$AMDCUDA_OPT_VERBOSE" = "1" ]]; then
        echo "[*] $@"
    fi
}

log_warn() {
    echo "[!] $@"
}

exec_with_logs() {
    cat >>"$AMDCUDA_SCRIPT_LOGFILE" <<EOF
===================================================
Running command: $@
Working directory: $(pwd)

EOF

    local exit_code=0
    # Actually running the command
    if [[ "$AMDCUDA_OPT_VERBOSE" = "1" ]]; then
        # In verbose mode, dump everything to both the terminal and the log file
        "$@" | tee -a "$AMDCUDA_SCRIPT_LOGFILE"
        exit_code=${PIPESTATUS[0]}
    else
        # In non-verbose mode, we still dump the stderr, but silently logs everything else to the log file
        "$@" 2>&1 >>"$AMDCUDA_SCRIPT_LOGFILE" | tee -a "$AMDCUDA_SCRIPT_LOGFILE"
        exit_code=${PIPESTATUS[0]}
    fi

        cat >>"$AMDCUDA_SCRIPT_LOGFILE" <<EOF

Program exited with code: $exit_code
===================================================

EOF

    if [[ $exit_code != 0 ]]; then
        echo "[!] Fatal error: the previous command exited with code $exit_code. Outputs from the command can be found in \"$AMDCUDA_SCRIPT_LOGFILE\"."
        exit $exit_code
    fi
}

cd_with_logs() {
    if [[ ! -z "$1" ]]; then
        cd "$1"
        cat >>"$AMDCUDA_SCRIPT_LOGFILE" <<EOF
===================================================
Changing directory to: $1
Working directory: $(pwd)
===================================================

EOF
    fi
}

revert_cd_with_logs() {
    cd_with_logs "$AMDCUDA_CWD"
}

try_find_raw_ir() {
    FOUND_IR=`find . -maxdepth 1 \( \
        -name $1'*.bc' -o -name $1'*.ll' \
    \) ! -name '*.translated*' | head -n 1`

    if [[ ! -z "$FOUND_IR" ]]; then
        FOUND_IR="$(realpath "$FOUND_IR")"
    fi
}

find_raw_ir() {
    try_find_raw_ir "$1"

    if [[ -z "$FOUND_IR" ]]; then
        echo "[!] Unable to find input file: $1"
        exit 1
    fi
}

find_translated_ir() {
    FOUND_IR=""
    local raw_ir_filename="$1"

    if [[ -f "${raw_ir_filename}.translated_test.bc" ]]; then
        FOUND_IR="${raw_ir_filename}.translated_test.bc"
    elif [[ -f "${raw_ir_filename}.translated.bc" ]]; then
        FOUND_IR="${raw_ir_filename}.translated.bc"
    else
        exit 1
    fi
}

# Search for the bitcode library with the given name, saves the full path to the FOUND_IR variable
find_bitcode_lib() {
    FOUND_IR=""
    local libname="$1"

    for search_path in "${AMDCUDA_BITCODE_SEARCH_PATHS[@]}"; do
        if [[ -f "$search_path/$libname" ]]; then
            FOUND_IR="$search_path/$libname"
            return
        fi
    done

    echo "[!] Unable to find a required bitcode named: $libname"
    exit 1
}

postprocess_ir() {
    local ir_name=$1
    if [[ "${ir_name:0-3}" = ".bc" ]] && [[ "$AMDCUDA_OPT_INSPECT_IR" = "1" ]]; then
        "$AMDCUDA_LLVM_DIS" "$ir_name"
    fi
}

# Remove all temporary files produced by the compiler and the translator
cleanup_all_temps() {
    local progname="$1"
    find . \( \
        -name "$progname.s" -o \
        -name "$progname.ii" -o \
        -name "$progname.bc" -o \
        -name "$progname-cuda.translated.s" -o \
        -name "$progname-cuda.translated.o" -o \
        -name "$progname-cuda.translated.out" -o \
        -name "$progname-cuda.translated.hipfb" -o \
        -name "libbc-clang_rt.builtins.amdgcn.a" -o \
        -name "$progname-host.translated.s" -o \
        -name "$progname-host.translated.o" -o \
        -name "$progname-host.translated.out.*.bc" -o \
        -name "$progname-cuda.translated.linked.bc" -o \
        -name "$progname-cuda.translated.out.*.o" -o \
        -name "$progname-cuda.translated.out.*.bc" -o \
        -name "$progname-cuda.translated.out.resolution.txt" -o \
        -name "$progname.cu-cuda-*.fatbin" -o \
        -name "$progname-cuda-*.bc" -o \
        -name "$progname-cuda-*.cui" -o \
        -name "$progname-cuda-*.cubin" -o \
        -name "$progname-cuda-*.s" -o \
        -name "$progname-host-*.bc" -o \
        -name "$progname-host-*.s" -o \
        -name "$progname-host-*.cui" \) \
        -type f -exec rm {} \;
}

# ====== initialization ======

while getopts "o:O:cthiI:gl:L:v" in_opt; do
    case $in_opt in
    c)      AMDCUDA_OPT_LINK=0;;
    o)      AMDCUDA_OPT_OUTPUT="$OPTARG";;
    O)      AMDCUDA_OPT_OPTIMIZATION_LEVEL="$OPTARG";;
    t)      AMDCUDA_OPT_SAVE_TEMPS=1;;
    i)      AMDCUDA_OPT_INSPECT_IR=1;;
    I)      AMDCUDA_CFLAGS+=("-I$OPTARG");;
    v)      AMDCUDA_OPT_VERBOSE=1
            AMDCUDA_CFLAGS+=("-v")
            AMDCUDA_LDFLAGS+=("-v")
            ;;
    g)      AMDCUDA_CFLAGS+=("-g");;
    l)      AMDCUDA_LDFLAGS+=("-l$OPTARG");;
    L)      AMDCUDA_LDFLAGS+=("-L$OPTARG");;
    ? | h)  print_usage
            exit 2;;
    esac
done

shift $(expr $OPTIND - 1 )

if test $# -eq 0 ; then
    echo "[!] No input files"
    print_usage
    exit 1
fi

# Set default output name if not provided
if [[ -z "$AMDCUDA_OPT_OUTPUT" ]]; then
    if test $# -eq 1; then
        # Default output name to "progname.translated"
        AMDCUDA_OPT_OUTPUT="$1"
        AMDCUDA_OPT_OUTPUT="${AMDCUDA_OPT_OUTPUT%.*}.translated"
    else
        AMDCUDA_OPT_OUTPUT="a.translated"
    fi
fi

# verify valid device lib path
if [[ ! -z "$DEVICE_LIB_PATH" ]]; then
    log_info "Will look for device-side bytecodes to link to in $DEVICE_LIB_PATH"
elif [[ ! -z "$HIP_DEVICE_LIB_PATH" ]]; then
    export DEVICE_LIB_PATH="$HIP_DEVICE_LIB_PATH"
    log_info "Using HIP_DEVICE_LIB_PATH = $HIP_DEVICE_LIB_PATH"
elif [[ -d "/opt/rocm/amdgcn/bitcode" ]]; then
    export DEVICE_LIB_PATH="/opt/rocm/amdgcn/bitcode"
    log_info "DEVICE_LIB_PATH not set, using device libs provided by the system."
else
    log_fatal "DEVICE_LIB_PATH is undefined and amdcuda couldn't find a system-provided version."
fi

# add system device lib path to search paths
AMDCUDA_BITCODE_SEARCH_PATHS+=("$DEVICE_LIB_PATH")

# verify valid clang-rt built-ins
if [[ ! -f "$AMDCUDA_CLANGRT_DIR/libclang_rt.builtins.a" ]]; then
    log_warn "Unable to find libclang_rt.builtins.a in clang's resource directory. Is this version of clang not built with the runtime builtins?"
fi

# verify HIP_PATH is set and valid
if [[ -z "$HIP_PATH" ]] || [[ ! -d "$HIP_PATH" ]]; then
    log_fatal "HIP_PATH must be set and points to a directory where HIP is."
fi

# verify ROCM_PATH is set and valid
if [[ -z "$ROCM_PATH" ]] || [[ ! -d "$ROCM_PATH" ]]; then
    log_fatal "ROCM_PATH must be set and points to a directory where the rocm installation is."
fi

# ===========================================

while test $# -gt 0; do
    AMDCUDA_INPUT="$1"
    # Shift to the next file
    shift

    AMDCUDA_INPUT_PROGNAME="$(basename "$AMDCUDA_INPUT")"
    AMDCUDA_INPUT_DIR="$(realpath "$(dirname "$AMDCUDA_INPUT")")"
    cd_with_logs "$AMDCUDA_INPUT_DIR"

    if [[ "${AMDCUDA_INPUT_PROGNAME##*.}" = "cu" ]] || [[ "${AMDCUDA_INPUT_PROGNAME##*.}" = "cpp" ]] || [[ "${AMDCUDA_INPUT_PROGNAME##*.}" = "c" ]]; then
        if [[ ! -d "${CUDA_PATH}" ]]; then
            log_fatal "[!] Cannot accept a CUDA source file as input: CUDA_PATH is undefined."
        fi

        AMDCUDA_INPUT_SOURCEFILE="$AMDCUDA_INPUT_PROGNAME"
        AMDCUDA_INPUT_PROGNAME="${AMDCUDA_INPUT_PROGNAME%.*}"
        cleanup_all_temps "$AMDCUDA_INPUT_PROGNAME"

        log_info "Compiling $AMDCUDA_INPUT_PROGNAME to IR..."
        exec_with_logs "$AMDCUDA_CLANGXX" \
            "$AMDCUDA_INPUT_SOURCEFILE" -c \
            "${AMDCUDA_CFLAGS[@]}" \
            "-O${AMDCUDA_OPT_OPTIMIZATION_LEVEL}" \
            "--cuda-path=$CUDA_PATH" \
            "--cuda-gpu-arch=sm_35" \
            "-L${CUDA_PATH}/lib64" \
            -lcudart_static -ldl -lrt -pthread -save-temps -fPIC
    elif [[ "${AMDCUDA_INPUT##*.}" = "o" ]]; then
        AMDCUDA_ADDITIONAL_OBJECTS+=("$AMDCUDA_INPUT")
        log_info "Will link against compiled object ${AMDCUDA_INPUT}"
        revert_cd_with_logs
        continue
    else
        log_fatal "[!] Unacceptable input ${AMDCUDA_INPUT}"
        exit 1
    fi

    # derive related names & other info
    AMDCUDA_INPUT_MAIN_FILENAME="${AMDCUDA_INPUT_PROGNAME}.cu"
    AMDCUDA_OUTPUT_KERNEL_LINKED_BITCODE="${AMDCUDA_INPUT_PROGNAME}-cuda.translated.linked.bc"
    AMDCUDA_OUTPUT_KERNEL_ASSEMBLY="${AMDCUDA_INPUT_PROGNAME}-cuda.translated.s"
    AMDCUDA_OUTPUT_KERNEL_OBJECT="${AMDCUDA_INPUT_PROGNAME}-cuda.translated.o"
    AMDCUDA_OUTPUT_KERNEL_LINKED="${AMDCUDA_INPUT_PROGNAME}-cuda.translated.out"
    AMDCUDA_OUTPUT_KERNEL_FATBIN="${AMDCUDA_INPUT_PROGNAME}-cuda.translated.hipfb"
    AMDCUDA_EXTRACTED_RT_BUILTINS="libbc-clang_rt.builtins.amdgcn.a"
    AMDCUDA_OUTPUT_HOST_ASSEMBLY="${AMDCUDA_INPUT_PROGNAME}-host.translated.s"
    AMDCUDA_OUTPUT_HOST_OBJECT="${AMDCUDA_INPUT_PROGNAME}-host.translated.o"
    AMDCUDA_OUTPUT_HOST_LINKED="${AMDCUDA_INPUT_PROGNAME}.translated"
    AMDCUDA_LINKED_BITCODE_FULLPATHS=()

    log_section_start "Gathering bitcode libraries"
    for builtin_bc in "${AMDCUDA_BUILTIN_HIP_DEVICE_BITCODE[@]}"; do
        find_bitcode_lib "$builtin_bc"
        AMDCUDA_KERN_ASSEMBLER_FLAGS+=(
            "-mlink-builtin-bitcode" "$FOUND_IR"
        )
        log_section_output "* Built-in Bitcode $builtin_bc at $FOUND_IR"
    done

    for linked_bc in "${AMDCUDA_LINKED_ADDITIONAL_BITCODE[@]}"; do
        find_bitcode_lib "$linked_bc"
        AMDCUDA_LINKED_BITCODE_FULLPATHS+=(
            "$FOUND_IR"
        )
        log_section_output "* Linked Bitcode $linked_bc at $FOUND_IR"
    done
    log_section_end

    # locate host and kernel IRs
    log_section_start "Locating compiled IRs"
        find_raw_ir "${AMDCUDA_INPUT_PROGNAME}-host"
        AMDCUDA_INPUT_HOST_IR="$FOUND_IR"
        postprocess_ir "$AMDCUDA_INPUT_HOST_IR"
        log_section_output "Found host IR at $AMDCUDA_INPUT_HOST_IR"

        find_raw_ir "${AMDCUDA_INPUT_PROGNAME}-cuda"
        AMDCUDA_INPUT_KERN_IR="$FOUND_IR"
        postprocess_ir "$AMDCUDA_INPUT_KERN_IR"
        log_section_output "[*] Found device IR at $AMDCUDA_INPUT_KERN_IR"
    log_section_end

    # translate kernel
    log_info "Translating kernel IR..."
    exec_with_logs "$AMDCUDA_KERN_TTOR" "$AMDCUDA_INPUT_KERN_IR"

    find_translated_ir "$AMDCUDA_INPUT_KERN_IR"
    AMDCUDA_TRANSLATED_KERN_IR="$FOUND_IR"
    postprocess_ir "$AMDCUDA_TRANSLATED_KERN_IR"

    log_info "Linking CUDAAMD bitcode..."
    exec_with_logs "$AMDCUDA_LLVM_LINK" \
        -o "$AMDCUDA_OUTPUT_KERNEL_LINKED_BITCODE" \
        "$AMDCUDA_TRANSLATED_KERN_IR" \
        "${AMDCUDA_LINKED_BITCODE_FULLPATHS[@]}"
    postprocess_ir "$AMDCUDA_OUTPUT_KERNEL_LINKED_BITCODE"

    # compile translated kernel
    log_info "Compiling translated kernel IR to assembly..."
    exec_with_logs "$AMDCUDA_CLANG" \
        -cc1 -triple amdgcn-amd-amdhsa \
        -aux-triple x86_64-unknown-linux-gnu -S \
        -main-file-name "$AMDCUDA_INPUT_MAIN_FILENAME" \
        "$AMDCUDA_KERN_ASSEMBLER_FLAGS[@]" \
        "-O${AMDCUDA_OPT_OPTIMIZATION_LEVEL}" \
        -target-cpu gfx90a \
        -mllvm \
        -treat-scalable-fixed-error-as-warning \
        -debugger-tuning=gdb \
        -resource-dir "$AMDCUDA_CLANG_RES_DIR" \
        -fno-autolink "-fdebug-compilation-dir=$(pwd)" \
        -ferror-limit 19 \
        -fhip-new-launch-api \
        -fgnuc-version=4.2.1 \
        -fcolor-diagnostics \
        -vectorize-loops \
        -vectorize-slp \
        -mllvm \
        -amdgpu-early-inline-all=true \
        -mllvm \
        -amdgpu-function-calls=false \
        -cuid=7426647a80c85315 \
        -fcuda-allow-variadic-functions \
        -faddrsig \
        -o "$AMDCUDA_OUTPUT_KERNEL_ASSEMBLY" \
        -x ir \
        "$AMDCUDA_OUTPUT_KERNEL_LINKED_BITCODE"

    log_info "Aseembling compiled kernel..."
    exec_with_logs "$AMDCUDA_CLANG" \
        -cc1as \
        -triple amdgcn-amd-amdhsa \
        -filetype obj \
        -main-file-name "$AMDCUDA_INPUT_MAIN_FILENAME" \
        -target-cpu gfx90a \
        "-fdebug-compilation-dir=$(pwd)" \
        -dwarf-version=5 \
        -mrelocation-model pic \
        --mrelax-relocations \
        -mllvm \
        -amdgpu-early-inline-all=true \
        -mllvm \
        -amdgpu-function-calls=false \
        -o "$AMDCUDA_OUTPUT_KERNEL_OBJECT" \
        "$AMDCUDA_OUTPUT_KERNEL_ASSEMBLY"

    log_info "Extracting libbc-clang runtime built-ins..."
    exec_with_logs "$AMDCUDA_CLANG_OFFLOAD_BUNDLER" \
        -unbundle \
        -type=a \
        "-input=$AMDCUDA_CLANGRT_DIR/libclang_rt.builtins.a" \
        -targets=hip-amdgcn-amd-amdhsa-gfx90a \
        "-output=$AMDCUDA_EXTRACTED_RT_BUILTINS" \
        -allow-missing-bundles \
        -hip-openmp-compatible

    log_info "Linking kernel..."
    exec_with_logs "$AMDCUDA_LLD" \
        -flavor gnu \
        --no-undefined \
        -shared \
        -plugin-opt=-amdgpu-internalize-symbols \
        -plugin-opt=mcpu=gfx90a \
        -plugin-opt="O${AMDCUDA_OPT_OPTIMIZATION_LEVEL}" \
        -plugin-opt=-amdgpu-early-inline-all=true \
        -plugin-opt=-amdgpu-function-calls=false \
        -save-temps \
        -o "$AMDCUDA_OUTPUT_KERNEL_LINKED" \
        "$AMDCUDA_OUTPUT_KERNEL_OBJECT" \
        "$AMDCUDA_EXTRACTED_RT_BUILTINS"

    log_info "Bundling kernel..."
    exec_with_logs "$AMDCUDA_CLANG_OFFLOAD_BUNDLER" \
        -type=o \
        -bundle-align=4096 \
        -targets=host-x86_64-unknown-linux,hipv4-amdgcn-amd-amdhsa--gfx90a \
        -input=/dev/null \
        "-input=$AMDCUDA_OUTPUT_KERNEL_LINKED" \
        "-output=$AMDCUDA_OUTPUT_KERNEL_FATBIN"

    log_info "Swapping kernel code and translating host-side program..."
    exec_with_logs "$AMDCUDA_HOST_TTOR" "$AMDCUDA_INPUT_HOST_IR" "$AMDCUDA_OUTPUT_KERNEL_FATBIN"
    find_translated_ir "$AMDCUDA_INPUT_HOST_IR"
    AMDCUDA_TRANSLATED_HOST_IR="$FOUND_IR"
    postprocess_ir "$AMDCUDA_TRANSLATED_HOST_IR"

    log_info "Compiling translated host IR to assembly..."
    exec_with_logs "$AMDCUDA_CLANG" \
        -cc1 \
        -triple x86_64-unknown-linux-gnu \
        -aux-triple amdgcn-amd-amdhsa \
        -S -save-temps=cwd \
        -disable-free \
        -clear-ast-before-backend \
        -disable-llvm-verifier \
        -discard-value-names \
        -main-file-name "$AMDCUDA_INPUT_MAIN_FILENAME" \
        -mrelocation-model pic \
        -pic-level 2 \
        -pic-is-pie \
        -mframe-pointer=none \
        -fmath-errno \
        -fno-rounding-math \
        -mconstructor-aliases \
        -funwind-tables=2 \
        -target-cpu x86-64 \
        -tune-cpu generic \
        -mllvm \
        -treat-scalable-fixed-error-as-warning \
        -debugger-tuning=gdb \
        "-fcoverage-compilation-dir=$(pwd)" \
        -resource-dir "$AMDCUDA_CLANG_RES_DIR" \
        "-O${AMDCUDA_OPT_OPTIMIZATION_LEVEL}" \
        "-fdebug-compilation-dir=$(pwd)" \
        -ferror-limit 19 \
        -fhip-new-launch-api \
        -fgnuc-version=4.2.1 \
        -fcolor-diagnostics \
        -vectorize-loops \
        -vectorize-slp \
        -mllvm \
        -amdgpu-early-inline-all=true \
        -mllvm \
        -amdgpu-function-calls=false \
        -cuid=7426647a80c85315 \
        -fcuda-allow-variadic-functions \
        -faddrsig \
        -D__GCC_HAVE_DWARF2_CFI_ASM=1 \
        -o "$AMDCUDA_OUTPUT_HOST_ASSEMBLY" \
        -x ir \
        "$AMDCUDA_TRANSLATED_HOST_IR"

    log_info "Aseembling compiled program..."
    exec_with_logs "$AMDCUDA_CLANG" \
        -cc1as \
        -triple x86_64-unknown-linux-gnu \
        -filetype obj \
        -main-file-name "$AMDCUDA_INPUT_MAIN_FILENAME" \
        -target-cpu x86-64 \
        "-fdebug-compilation-dir=$(pwd)" \
        -dwarf-version=5 \
        -mrelocation-model pic \
        --mrelax-relocations \
        -mllvm \
        -amdgpu-early-inline-all=true \
        -mllvm \
        -amdgpu-function-calls=false \
        -o "$AMDCUDA_OUTPUT_HOST_OBJECT" \
        "$AMDCUDA_OUTPUT_HOST_ASSEMBLY"
    
    # Move the file so it doesn't get removed
    mv "$AMDCUDA_OUTPUT_HOST_OBJECT" "$AMDCUDA_INPUT_PROGNAME.o"
    AMDCUDA_COMPILED_OBJECTS+=("$(pwd)/$AMDCUDA_INPUT_PROGNAME.o")

    if [[ "$AMDCUDA_OPT_SAVE_TEMPS" = "0" ]]; then
        log_info "Cleaning up $AMDCUDA_INPUT_PROGNAME..."
        cleanup_all_temps "$AMDCUDA_INPUT_PROGNAME"
    fi

    # Revert dir change
    revert_cd_with_logs
done

if [[ "$AMDCUDA_OPT_LINK" = "1" ]]; then
    log_info "Linking compiled program..."
    # "$AMDCUDA_LD" \
    #     -pie \
    #     --hash-style=gnu \
    #     --eh-frame-hdr \
    #     -m elf_x86_64 \
    #     -dynamic-linker /lib64/ld-linux-x86-64.so.2 \
    #     -o "$AMDCUDA_OUTPUT_HOST_LINKED" \
    #     /usr/lib64/Scrt1.o \
    #     /usr/lib64/crti.o \
    #     /usr/lib/gcc/x86_64-redhat-linux/8/crtbeginS.o \
    #     -L"$HIP_PATH/lib" \
    #     -lgcc_s \
    #     -lgcc \
    #     -lpthread \
    #     -lm \
    #     -lrt \
    #     -rpath="$HIP_PATH/lib:$ROCM_PATH/lib" \
    #     -lamdhip64 \
    #     -lclang_rt.builtins \
    #     -lstdc++ \
    #     -lm \
    #     -lgcc_s \
    #     -lgcc \
    #     -lc \
    #     -lgcc_s \
    #     -lgcc \
    #     "$AMDCUDA_OUTPUT_HOST_OBJECT" \
    #     /usr/lib/gcc/x86_64-redhat-linux/8/crtendS.o \
    #     /usr/lib/gcc/x86_64-redhat-linux/8/../../../../lib64/crtn.o \
    #     "-L$AMDCUDA_RT_DIR" \
    #     -lcudaonamd
    exec_with_logs "$AMDCUDA_CLANG" \
        -o "$AMDCUDA_OPT_OUTPUT" \
        -L"$AMDCUDA_RT_DIR" \
        -L"$ROCM_PATH/lib" \
        -L"$HIP_PATH/lib" \
        -Wl,-rpath="$AMDCUDA_RT_DIR:$HIP_PATH/lib:$ROCM_PATH/lib",--enable-new-dtags \
        -lcudaonamd \
        -lpthread \
        -lamdhip64 \
        -lstdc++ \
        -lrt \
        -lm \
        -lgcc_s \
        -lgcc \
        -lc \
        -lgcc_s \
        -lgcc \
        -lstdc++ \
        "${AMDCUDA_COMPILED_OBJECTS[@]}" \
        "${AMDCUDA_ADDITIONAL_OBJECTS[@]}" \
        "${AMDCUDA_LDFLAGS[@]}"
    
    if [[ "$AMDCUDA_OPT_SAVE_TEMPS" = "0" ]]; then
        # Remove objects if no save temps
        rm -f "${AMDCUDA_COMPILED_OBJECTS[@]}"
    fi
elif [[ "${#AMDCUDA_COMPILED_OBJECTS[*]}" = "1" ]]; then
    # Move the object to the output
    mv "${AMDCUDA_COMPILED_OBJECTS[0]}" "$AMDCUDA_OPT_OUTPUT"
else
    log_warn "Multiple objects were compiled, but no linking was requested. Output file specified by -o will be ignored."
fi

# Remove logfiles
if [[ "$AMDCUDA_OPT_SAVE_TEMPS" = "0" ]]; then
    rm -f "$AMDCUDA_SCRIPT_LOGFILE"
fi
